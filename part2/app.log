2025-08-30 20:04:53,248 [INFO] select pg_catalog.version()
2025-08-30 20:04:53,253 [INFO] [raw sql] ()
2025-08-30 20:04:54,194 [INFO] select current_schema()
2025-08-30 20:04:54,223 [INFO] [raw sql] ()
2025-08-30 20:04:55,147 [INFO] show standard_conforming_strings
2025-08-30 20:04:55,147 [INFO] [raw sql] ()
2025-08-30 20:04:56,299 [INFO] BEGIN (implicit)
2025-08-30 20:04:56,303 [INFO] SELECT 1
2025-08-30 20:04:56,304 [INFO] [generated in 0.00106s] ()
2025-08-30 20:04:56,999 [INFO] ROLLBACK
2025-08-30 20:09:02,875 [WARNING] Retrying langchain_google_genai.chat_models._chat_with_retry.<locals>._chat_with_retry in 2.0 seconds as it raised ResourceExhausted: 429 You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits. [violations {
  quota_metric: "generativelanguage.googleapis.com/generate_content_free_tier_input_token_count"
  quota_id: "GenerateContentInputTokensPerModelPerMinute-FreeTier"
  quota_dimensions {
    key: "model"
    value: "gemini-1.5-pro"
  }
  quota_dimensions {
    key: "location"
    value: "global"
  }
}
violations {
  quota_metric: "generativelanguage.googleapis.com/generate_content_free_tier_requests"
  quota_id: "GenerateRequestsPerMinutePerProjectPerModel-FreeTier"
  quota_dimensions {
    key: "model"
    value: "gemini-1.5-pro"
  }
  quota_dimensions {
    key: "location"
    value: "global"
  }
}
violations {
  quota_metric: "generativelanguage.googleapis.com/generate_content_free_tier_requests"
  quota_id: "GenerateRequestsPerDayPerProjectPerModel-FreeTier"
  quota_dimensions {
    key: "model"
    value: "gemini-1.5-pro"
  }
  quota_dimensions {
    key: "location"
    value: "global"
  }
}
, links {
  description: "Learn more about Gemini API quotas"
  url: "https://ai.google.dev/gemini-api/docs/rate-limits"
}
, retry_delay {
  seconds: 56
}
].
2025-08-30 20:09:05,184 [WARNING] Retrying langchain_google_genai.chat_models._chat_with_retry.<locals>._chat_with_retry in 4.0 seconds as it raised ResourceExhausted: 429 You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits. [violations {
  quota_metric: "generativelanguage.googleapis.com/generate_content_free_tier_requests"
  quota_id: "GenerateRequestsPerDayPerProjectPerModel-FreeTier"
  quota_dimensions {
    key: "model"
    value: "gemini-1.5-pro"
  }
  quota_dimensions {
    key: "location"
    value: "global"
  }
}
violations {
  quota_metric: "generativelanguage.googleapis.com/generate_content_free_tier_requests"
  quota_id: "GenerateRequestsPerMinutePerProjectPerModel-FreeTier"
  quota_dimensions {
    key: "model"
    value: "gemini-1.5-pro"
  }
  quota_dimensions {
    key: "location"
    value: "global"
  }
}
violations {
  quota_metric: "generativelanguage.googleapis.com/generate_content_free_tier_input_token_count"
  quota_id: "GenerateContentInputTokensPerModelPerMinute-FreeTier"
  quota_dimensions {
    key: "model"
    value: "gemini-1.5-pro"
  }
  quota_dimensions {
    key: "location"
    value: "global"
  }
}
, links {
  description: "Learn more about Gemini API quotas"
  url: "https://ai.google.dev/gemini-api/docs/rate-limits"
}
, retry_delay {
  seconds: 54
}
].
2025-08-30 20:09:09,510 [WARNING] Retrying langchain_google_genai.chat_models._chat_with_retry.<locals>._chat_with_retry in 8.0 seconds as it raised ResourceExhausted: 429 You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits. [violations {
  quota_metric: "generativelanguage.googleapis.com/generate_content_free_tier_input_token_count"
  quota_id: "GenerateContentInputTokensPerModelPerMinute-FreeTier"
  quota_dimensions {
    key: "model"
    value: "gemini-1.5-pro"
  }
  quota_dimensions {
    key: "location"
    value: "global"
  }
}
violations {
  quota_metric: "generativelanguage.googleapis.com/generate_content_free_tier_requests"
  quota_id: "GenerateRequestsPerMinutePerProjectPerModel-FreeTier"
  quota_dimensions {
    key: "model"
    value: "gemini-1.5-pro"
  }
  quota_dimensions {
    key: "location"
    value: "global"
  }
}
violations {
  quota_metric: "generativelanguage.googleapis.com/generate_content_free_tier_requests"
  quota_id: "GenerateRequestsPerDayPerProjectPerModel-FreeTier"
  quota_dimensions {
    key: "model"
    value: "gemini-1.5-pro"
  }
  quota_dimensions {
    key: "location"
    value: "global"
  }
}
, links {
  description: "Learn more about Gemini API quotas"
  url: "https://ai.google.dev/gemini-api/docs/rate-limits"
}
, retry_delay {
  seconds: 49
}
].
2025-08-30 20:09:17,853 [WARNING] Retrying langchain_google_genai.chat_models._chat_with_retry.<locals>._chat_with_retry in 16.0 seconds as it raised ResourceExhausted: 429 You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits. [violations {
  quota_metric: "generativelanguage.googleapis.com/generate_content_free_tier_requests"
  quota_id: "GenerateRequestsPerDayPerProjectPerModel-FreeTier"
  quota_dimensions {
    key: "model"
    value: "gemini-1.5-pro"
  }
  quota_dimensions {
    key: "location"
    value: "global"
  }
}
violations {
  quota_metric: "generativelanguage.googleapis.com/generate_content_free_tier_requests"
  quota_id: "GenerateRequestsPerMinutePerProjectPerModel-FreeTier"
  quota_dimensions {
    key: "model"
    value: "gemini-1.5-pro"
  }
  quota_dimensions {
    key: "location"
    value: "global"
  }
}
violations {
  quota_metric: "generativelanguage.googleapis.com/generate_content_free_tier_input_token_count"
  quota_id: "GenerateContentInputTokensPerModelPerMinute-FreeTier"
  quota_dimensions {
    key: "model"
    value: "gemini-1.5-pro"
  }
  quota_dimensions {
    key: "location"
    value: "global"
  }
}
, links {
  description: "Learn more about Gemini API quotas"
  url: "https://ai.google.dev/gemini-api/docs/rate-limits"
}
, retry_delay {
  seconds: 41
}
].
2025-08-30 20:09:34,278 [WARNING] Retrying langchain_google_genai.chat_models._chat_with_retry.<locals>._chat_with_retry in 32.0 seconds as it raised ResourceExhausted: 429 You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits. [violations {
  quota_metric: "generativelanguage.googleapis.com/generate_content_free_tier_requests"
  quota_id: "GenerateRequestsPerDayPerProjectPerModel-FreeTier"
  quota_dimensions {
    key: "model"
    value: "gemini-1.5-pro"
  }
  quota_dimensions {
    key: "location"
    value: "global"
  }
}
violations {
  quota_metric: "generativelanguage.googleapis.com/generate_content_free_tier_requests"
  quota_id: "GenerateRequestsPerMinutePerProjectPerModel-FreeTier"
  quota_dimensions {
    key: "model"
    value: "gemini-1.5-pro"
  }
  quota_dimensions {
    key: "location"
    value: "global"
  }
}
violations {
  quota_metric: "generativelanguage.googleapis.com/generate_content_free_tier_input_token_count"
  quota_id: "GenerateContentInputTokensPerModelPerMinute-FreeTier"
  quota_dimensions {
    key: "model"
    value: "gemini-1.5-pro"
  }
  quota_dimensions {
    key: "location"
    value: "global"
  }
}
, links {
  description: "Learn more about Gemini API quotas"
  url: "https://ai.google.dev/gemini-api/docs/rate-limits"
}
, retry_delay {
  seconds: 25
}
].
2025-08-30 20:10:06,627 [ERROR] Agent query error: 429 You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits. [violations {
  quota_metric: "generativelanguage.googleapis.com/generate_content_free_tier_requests"
  quota_id: "GenerateRequestsPerDayPerProjectPerModel-FreeTier"
  quota_dimensions {
    key: "model"
    value: "gemini-1.5-pro"
  }
  quota_dimensions {
    key: "location"
    value: "global"
  }
}
violations {
  quota_metric: "generativelanguage.googleapis.com/generate_content_free_tier_requests"
  quota_id: "GenerateRequestsPerMinutePerProjectPerModel-FreeTier"
  quota_dimensions {
    key: "model"
    value: "gemini-1.5-pro"
  }
  quota_dimensions {
    key: "location"
    value: "global"
  }
}
violations {
  quota_metric: "generativelanguage.googleapis.com/generate_content_free_tier_input_token_count"
  quota_id: "GenerateContentInputTokensPerModelPerMinute-FreeTier"
  quota_dimensions {
    key: "model"
    value: "gemini-1.5-pro"
  }
  quota_dimensions {
    key: "location"
    value: "global"
  }
}
, links {
  description: "Learn more about Gemini API quotas"
  url: "https://ai.google.dev/gemini-api/docs/rate-limits"
}
, retry_delay {
  seconds: 52
}
]
2025-08-30 20:14:06,145 [ERROR] Agent query error: Invalid argument provided to Gemini: 400 API key not valid. Please pass a valid API key. [reason: "API_KEY_INVALID"
domain: "googleapis.com"
metadata {
  key: "service"
  value: "generativelanguage.googleapis.com"
}
, locale: "en-US"
message: "API key not valid. Please pass a valid API key."
]
2025-08-30 20:17:11,159 [WARNING] Retrying langchain_google_genai.chat_models._chat_with_retry.<locals>._chat_with_retry in 2.0 seconds as it raised ResourceExhausted: 429 You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits. [violations {
  quota_metric: "generativelanguage.googleapis.com/generate_content_free_tier_input_token_count"
  quota_id: "GenerateContentInputTokensPerModelPerMinute-FreeTier"
  quota_dimensions {
    key: "model"
    value: "gemini-1.5-pro"
  }
  quota_dimensions {
    key: "location"
    value: "global"
  }
}
violations {
  quota_metric: "generativelanguage.googleapis.com/generate_content_free_tier_requests"
  quota_id: "GenerateRequestsPerMinutePerProjectPerModel-FreeTier"
  quota_dimensions {
    key: "model"
    value: "gemini-1.5-pro"
  }
  quota_dimensions {
    key: "location"
    value: "global"
  }
}
violations {
  quota_metric: "generativelanguage.googleapis.com/generate_content_free_tier_requests"
  quota_id: "GenerateRequestsPerDayPerProjectPerModel-FreeTier"
  quota_dimensions {
    key: "model"
    value: "gemini-1.5-pro"
  }
  quota_dimensions {
    key: "location"
    value: "global"
  }
}
, links {
  description: "Learn more about Gemini API quotas"
  url: "https://ai.google.dev/gemini-api/docs/rate-limits"
}
, retry_delay {
  seconds: 48
}
].
2025-08-30 20:17:13,486 [WARNING] Retrying langchain_google_genai.chat_models._chat_with_retry.<locals>._chat_with_retry in 4.0 seconds as it raised ResourceExhausted: 429 You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits. [violations {
  quota_metric: "generativelanguage.googleapis.com/generate_content_free_tier_input_token_count"
  quota_id: "GenerateContentInputTokensPerModelPerMinute-FreeTier"
  quota_dimensions {
    key: "model"
    value: "gemini-1.5-pro"
  }
  quota_dimensions {
    key: "location"
    value: "global"
  }
}
violations {
  quota_metric: "generativelanguage.googleapis.com/generate_content_free_tier_requests"
  quota_id: "GenerateRequestsPerMinutePerProjectPerModel-FreeTier"
  quota_dimensions {
    key: "model"
    value: "gemini-1.5-pro"
  }
  quota_dimensions {
    key: "location"
    value: "global"
  }
}
violations {
  quota_metric: "generativelanguage.googleapis.com/generate_content_free_tier_requests"
  quota_id: "GenerateRequestsPerDayPerProjectPerModel-FreeTier"
  quota_dimensions {
    key: "model"
    value: "gemini-1.5-pro"
  }
  quota_dimensions {
    key: "location"
    value: "global"
  }
}
, links {
  description: "Learn more about Gemini API quotas"
  url: "https://ai.google.dev/gemini-api/docs/rate-limits"
}
, retry_delay {
  seconds: 45
}
].
2025-08-30 20:17:17,829 [WARNING] Retrying langchain_google_genai.chat_models._chat_with_retry.<locals>._chat_with_retry in 8.0 seconds as it raised ResourceExhausted: 429 You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits. [violations {
  quota_metric: "generativelanguage.googleapis.com/generate_content_free_tier_input_token_count"
  quota_id: "GenerateContentInputTokensPerModelPerMinute-FreeTier"
  quota_dimensions {
    key: "model"
    value: "gemini-1.5-pro"
  }
  quota_dimensions {
    key: "location"
    value: "global"
  }
}
violations {
  quota_metric: "generativelanguage.googleapis.com/generate_content_free_tier_requests"
  quota_id: "GenerateRequestsPerMinutePerProjectPerModel-FreeTier"
  quota_dimensions {
    key: "model"
    value: "gemini-1.5-pro"
  }
  quota_dimensions {
    key: "location"
    value: "global"
  }
}
violations {
  quota_metric: "generativelanguage.googleapis.com/generate_content_free_tier_requests"
  quota_id: "GenerateRequestsPerDayPerProjectPerModel-FreeTier"
  quota_dimensions {
    key: "model"
    value: "gemini-1.5-pro"
  }
  quota_dimensions {
    key: "location"
    value: "global"
  }
}
, links {
  description: "Learn more about Gemini API quotas"
  url: "https://ai.google.dev/gemini-api/docs/rate-limits"
}
, retry_delay {
  seconds: 41
}
].
2025-08-30 20:17:26,147 [WARNING] Retrying langchain_google_genai.chat_models._chat_with_retry.<locals>._chat_with_retry in 16.0 seconds as it raised ResourceExhausted: 429 You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits. [violations {
  quota_metric: "generativelanguage.googleapis.com/generate_content_free_tier_input_token_count"
  quota_id: "GenerateContentInputTokensPerModelPerMinute-FreeTier"
  quota_dimensions {
    key: "model"
    value: "gemini-1.5-pro"
  }
  quota_dimensions {
    key: "location"
    value: "global"
  }
}
violations {
  quota_metric: "generativelanguage.googleapis.com/generate_content_free_tier_requests"
  quota_id: "GenerateRequestsPerMinutePerProjectPerModel-FreeTier"
  quota_dimensions {
    key: "model"
    value: "gemini-1.5-pro"
  }
  quota_dimensions {
    key: "location"
    value: "global"
  }
}
violations {
  quota_metric: "generativelanguage.googleapis.com/generate_content_free_tier_requests"
  quota_id: "GenerateRequestsPerDayPerProjectPerModel-FreeTier"
  quota_dimensions {
    key: "model"
    value: "gemini-1.5-pro"
  }
  quota_dimensions {
    key: "location"
    value: "global"
  }
}
, links {
  description: "Learn more about Gemini API quotas"
  url: "https://ai.google.dev/gemini-api/docs/rate-limits"
}
, retry_delay {
  seconds: 33
}
].
2025-08-30 20:17:42,462 [WARNING] Retrying langchain_google_genai.chat_models._chat_with_retry.<locals>._chat_with_retry in 32.0 seconds as it raised ResourceExhausted: 429 You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits. [violations {
  quota_metric: "generativelanguage.googleapis.com/generate_content_free_tier_requests"
  quota_id: "GenerateRequestsPerDayPerProjectPerModel-FreeTier"
  quota_dimensions {
    key: "model"
    value: "gemini-1.5-pro"
  }
  quota_dimensions {
    key: "location"
    value: "global"
  }
}
violations {
  quota_metric: "generativelanguage.googleapis.com/generate_content_free_tier_requests"
  quota_id: "GenerateRequestsPerMinutePerProjectPerModel-FreeTier"
  quota_dimensions {
    key: "model"
    value: "gemini-1.5-pro"
  }
  quota_dimensions {
    key: "location"
    value: "global"
  }
}
violations {
  quota_metric: "generativelanguage.googleapis.com/generate_content_free_tier_input_token_count"
  quota_id: "GenerateContentInputTokensPerModelPerMinute-FreeTier"
  quota_dimensions {
    key: "model"
    value: "gemini-1.5-pro"
  }
  quota_dimensions {
    key: "location"
    value: "global"
  }
}
, links {
  description: "Learn more about Gemini API quotas"
  url: "https://ai.google.dev/gemini-api/docs/rate-limits"
}
, retry_delay {
  seconds: 16
}
].
2025-08-30 20:18:14,769 [ERROR] Agent query error: 429 You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits. [violations {
  quota_metric: "generativelanguage.googleapis.com/generate_content_free_tier_requests"
  quota_id: "GenerateRequestsPerDayPerProjectPerModel-FreeTier"
  quota_dimensions {
    key: "model"
    value: "gemini-1.5-pro"
  }
  quota_dimensions {
    key: "location"
    value: "global"
  }
}
violations {
  quota_metric: "generativelanguage.googleapis.com/generate_content_free_tier_requests"
  quota_id: "GenerateRequestsPerMinutePerProjectPerModel-FreeTier"
  quota_dimensions {
    key: "model"
    value: "gemini-1.5-pro"
  }
  quota_dimensions {
    key: "location"
    value: "global"
  }
}
violations {
  quota_metric: "generativelanguage.googleapis.com/generate_content_free_tier_input_token_count"
  quota_id: "GenerateContentInputTokensPerModelPerMinute-FreeTier"
  quota_dimensions {
    key: "model"
    value: "gemini-1.5-pro"
  }
  quota_dimensions {
    key: "location"
    value: "global"
  }
}
, links {
  description: "Learn more about Gemini API quotas"
  url: "https://ai.google.dev/gemini-api/docs/rate-limits"
}
, retry_delay {
  seconds: 44
}
]
2025-08-30 20:28:20,751 [WARNING] Retrying langchain_google_genai.chat_models._chat_with_retry.<locals>._chat_with_retry in 2.0 seconds as it raised ResourceExhausted: 429 You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits. [violations {
  quota_metric: "generativelanguage.googleapis.com/generate_content_free_tier_input_token_count"
  quota_id: "GenerateContentInputTokensPerModelPerMinute-FreeTier"
  quota_dimensions {
    key: "model"
    value: "gemini-1.5-pro"
  }
  quota_dimensions {
    key: "location"
    value: "global"
  }
}
violations {
  quota_metric: "generativelanguage.googleapis.com/generate_content_free_tier_requests"
  quota_id: "GenerateRequestsPerMinutePerProjectPerModel-FreeTier"
  quota_dimensions {
    key: "model"
    value: "gemini-1.5-pro"
  }
  quota_dimensions {
    key: "location"
    value: "global"
  }
}
violations {
  quota_metric: "generativelanguage.googleapis.com/generate_content_free_tier_requests"
  quota_id: "GenerateRequestsPerDayPerProjectPerModel-FreeTier"
  quota_dimensions {
    key: "model"
    value: "gemini-1.5-pro"
  }
  quota_dimensions {
    key: "location"
    value: "global"
  }
}
, links {
  description: "Learn more about Gemini API quotas"
  url: "https://ai.google.dev/gemini-api/docs/rate-limits"
}
, retry_delay {
  seconds: 38
}
].
2025-08-30 20:28:23,138 [WARNING] Retrying langchain_google_genai.chat_models._chat_with_retry.<locals>._chat_with_retry in 4.0 seconds as it raised ResourceExhausted: 429 You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits. [violations {
  quota_metric: "generativelanguage.googleapis.com/generate_content_free_tier_requests"
  quota_id: "GenerateRequestsPerDayPerProjectPerModel-FreeTier"
  quota_dimensions {
    key: "model"
    value: "gemini-1.5-pro"
  }
  quota_dimensions {
    key: "location"
    value: "global"
  }
}
violations {
  quota_metric: "generativelanguage.googleapis.com/generate_content_free_tier_requests"
  quota_id: "GenerateRequestsPerMinutePerProjectPerModel-FreeTier"
  quota_dimensions {
    key: "model"
    value: "gemini-1.5-pro"
  }
  quota_dimensions {
    key: "location"
    value: "global"
  }
}
violations {
  quota_metric: "generativelanguage.googleapis.com/generate_content_free_tier_input_token_count"
  quota_id: "GenerateContentInputTokensPerModelPerMinute-FreeTier"
  quota_dimensions {
    key: "model"
    value: "gemini-1.5-pro"
  }
  quota_dimensions {
    key: "location"
    value: "global"
  }
}
, links {
  description: "Learn more about Gemini API quotas"
  url: "https://ai.google.dev/gemini-api/docs/rate-limits"
}
, retry_delay {
  seconds: 36
}
].
2025-08-30 20:28:27,411 [WARNING] Retrying langchain_google_genai.chat_models._chat_with_retry.<locals>._chat_with_retry in 8.0 seconds as it raised ResourceExhausted: 429 You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits. [violations {
  quota_metric: "generativelanguage.googleapis.com/generate_content_free_tier_requests"
  quota_id: "GenerateRequestsPerDayPerProjectPerModel-FreeTier"
  quota_dimensions {
    key: "model"
    value: "gemini-1.5-pro"
  }
  quota_dimensions {
    key: "location"
    value: "global"
  }
}
violations {
  quota_metric: "generativelanguage.googleapis.com/generate_content_free_tier_requests"
  quota_id: "GenerateRequestsPerMinutePerProjectPerModel-FreeTier"
  quota_dimensions {
    key: "model"
    value: "gemini-1.5-pro"
  }
  quota_dimensions {
    key: "location"
    value: "global"
  }
}
violations {
  quota_metric: "generativelanguage.googleapis.com/generate_content_free_tier_input_token_count"
  quota_id: "GenerateContentInputTokensPerModelPerMinute-FreeTier"
  quota_dimensions {
    key: "model"
    value: "gemini-1.5-pro"
  }
  quota_dimensions {
    key: "location"
    value: "global"
  }
}
, links {
  description: "Learn more about Gemini API quotas"
  url: "https://ai.google.dev/gemini-api/docs/rate-limits"
}
, retry_delay {
  seconds: 31
}
].
2025-08-30 20:28:35,705 [WARNING] Retrying langchain_google_genai.chat_models._chat_with_retry.<locals>._chat_with_retry in 16.0 seconds as it raised ResourceExhausted: 429 You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits. [violations {
  quota_metric: "generativelanguage.googleapis.com/generate_content_free_tier_input_token_count"
  quota_id: "GenerateContentInputTokensPerModelPerMinute-FreeTier"
  quota_dimensions {
    key: "model"
    value: "gemini-1.5-pro"
  }
  quota_dimensions {
    key: "location"
    value: "global"
  }
}
violations {
  quota_metric: "generativelanguage.googleapis.com/generate_content_free_tier_requests"
  quota_id: "GenerateRequestsPerMinutePerProjectPerModel-FreeTier"
  quota_dimensions {
    key: "model"
    value: "gemini-1.5-pro"
  }
  quota_dimensions {
    key: "location"
    value: "global"
  }
}
violations {
  quota_metric: "generativelanguage.googleapis.com/generate_content_free_tier_requests"
  quota_id: "GenerateRequestsPerDayPerProjectPerModel-FreeTier"
  quota_dimensions {
    key: "model"
    value: "gemini-1.5-pro"
  }
  quota_dimensions {
    key: "location"
    value: "global"
  }
}
, links {
  description: "Learn more about Gemini API quotas"
  url: "https://ai.google.dev/gemini-api/docs/rate-limits"
}
, retry_delay {
  seconds: 23
}
].
2025-08-30 20:28:51,998 [WARNING] Retrying langchain_google_genai.chat_models._chat_with_retry.<locals>._chat_with_retry in 32.0 seconds as it raised ResourceExhausted: 429 You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits. [violations {
  quota_metric: "generativelanguage.googleapis.com/generate_content_free_tier_requests"
  quota_id: "GenerateRequestsPerDayPerProjectPerModel-FreeTier"
  quota_dimensions {
    key: "model"
    value: "gemini-1.5-pro"
  }
  quota_dimensions {
    key: "location"
    value: "global"
  }
}
violations {
  quota_metric: "generativelanguage.googleapis.com/generate_content_free_tier_requests"
  quota_id: "GenerateRequestsPerMinutePerProjectPerModel-FreeTier"
  quota_dimensions {
    key: "model"
    value: "gemini-1.5-pro"
  }
  quota_dimensions {
    key: "location"
    value: "global"
  }
}
violations {
  quota_metric: "generativelanguage.googleapis.com/generate_content_free_tier_input_token_count"
  quota_id: "GenerateContentInputTokensPerModelPerMinute-FreeTier"
  quota_dimensions {
    key: "model"
    value: "gemini-1.5-pro"
  }
  quota_dimensions {
    key: "location"
    value: "global"
  }
}
, links {
  description: "Learn more about Gemini API quotas"
  url: "https://ai.google.dev/gemini-api/docs/rate-limits"
}
, retry_delay {
  seconds: 7
}
].
2025-08-30 20:29:24,262 [ERROR] Agent query error: 429 You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits. [violations {
  quota_metric: "generativelanguage.googleapis.com/generate_content_free_tier_input_token_count"
  quota_id: "GenerateContentInputTokensPerModelPerMinute-FreeTier"
  quota_dimensions {
    key: "model"
    value: "gemini-1.5-pro"
  }
  quota_dimensions {
    key: "location"
    value: "global"
  }
}
violations {
  quota_metric: "generativelanguage.googleapis.com/generate_content_free_tier_requests"
  quota_id: "GenerateRequestsPerMinutePerProjectPerModel-FreeTier"
  quota_dimensions {
    key: "model"
    value: "gemini-1.5-pro"
  }
  quota_dimensions {
    key: "location"
    value: "global"
  }
}
violations {
  quota_metric: "generativelanguage.googleapis.com/generate_content_free_tier_requests"
  quota_id: "GenerateRequestsPerDayPerProjectPerModel-FreeTier"
  quota_dimensions {
    key: "model"
    value: "gemini-1.5-pro"
  }
  quota_dimensions {
    key: "location"
    value: "global"
  }
}
, links {
  description: "Learn more about Gemini API quotas"
  url: "https://ai.google.dev/gemini-api/docs/rate-limits"
}
, retry_delay {
  seconds: 35
}
]
2025-08-30 22:07:19,371 [ERROR] SQL query error: An output parsing error occurred. In order to pass this error back to the agent and have it try again, pass `handle_parsing_errors=True` to the AgentExecutor. This is the error: Could not parse LLM output: `I don't know`
For troubleshooting, visit: https://python.langchain.com/docs/troubleshooting/errors/OUTPUT_PARSING_FAILURE 
2025-08-30 22:23:26,265 [INFO] select pg_catalog.version()
2025-08-30 22:23:26,266 [INFO] [raw sql] ()
2025-08-30 22:23:27,129 [INFO] select current_schema()
2025-08-30 22:23:27,135 [INFO] [raw sql] ()
2025-08-30 22:23:27,982 [INFO] show standard_conforming_strings
2025-08-30 22:23:27,986 [INFO] [raw sql] ()
2025-08-30 22:23:28,624 [INFO] BEGIN (implicit)
2025-08-30 22:23:28,627 [INFO] SELECT 1
2025-08-30 22:23:28,629 [INFO] [generated in 0.00244s] ()
2025-08-30 22:23:29,292 [INFO] ROLLBACK
2025-08-30 22:23:46,473 [INFO] BEGIN (implicit)
2025-08-30 22:23:46,473 [INFO] SELECT COUNT(*) FROM insurance_policies
2025-08-30 22:23:46,479 [INFO] [generated in 0.00534s] ()
2025-08-30 22:23:47,131 [INFO] ROLLBACK
2025-08-30 22:24:07,616 [INFO] BEGIN (implicit)
2025-08-30 22:24:07,620 [INFO] 
            SELECT 
                COUNT(*) as total_policies,
                AVG(premium) as avg_premium,
                SUM(premium) as total_premium,
                MIN(insurance_period_start_date) as earliest_policy,
                MAX(insurance_period_end_date) as latest_policy
            FROM insurance_policies
        
2025-08-30 22:24:07,627 [INFO] [generated in 0.00744s] ()
2025-08-30 22:24:08,274 [INFO] ROLLBACK
2025-08-30 23:49:31,208 [ERROR] Query processing error: InsuranceRAGSystem.__init__() takes 1 positional argument but 2 were given
2025-08-31 00:03:18,182 [ERROR] Query processing error: InsuranceRAGSystem.__init__() takes 1 positional argument but 2 were given
2025-08-31 00:07:00,371 [ERROR] Query processing error: InsuranceRAGSystem.__init__() takes 1 positional argument but 2 were given
2025-08-31 20:25:32,046 [ERROR] Excel ingestion error: ingest_excel_data() missing 1 required positional argument: 'filename'
2025-08-31 20:29:27,218 [ERROR] Error ingesting data: 400: Missing required columns: policy_number, sum_insured, premium, own_retention_ppn, own_retention_sum_insured, own_retention_premium, treaty_ppn, treaty_sum_insured, treaty_premium, insurance_period
2025-08-31 21:06:25,956 [ERROR] Error ingesting data: 400: Missing required columns: policy_number, sum_insured, premium, own_retention_ppn, own_retention_sum_insured, own_retention_premium, treaty_ppn, treaty_sum_insured, treaty_premium, insurance_period
2025-08-31 21:09:18,844 [ERROR] Error ingesting data: 400: Missing required columns: policy_number, sum_insured, premium, own_retention_ppn, own_retention_sum_insured, own_retention_premium, treaty_ppn, treaty_sum_insured, treaty_premium, insurance_period
2025-09-01 21:23:01,192 [ERROR] Error ingesting data: 400: Missing required columns: policy_number, insured_name, sum_insured, premium, own_retention_ppn, own_retention_sum_insured, own_retention_premium, treaty_ppn, treaty_sum_insured, treaty_premium, facultative_outward_ppn, facultative_outward_sum_insured, facultative_outward_premium, insurance_period_start_date, insurance_period_end_date
2025-09-01 21:32:04,506 [INFO] select pg_catalog.version()
2025-09-01 21:32:04,507 [INFO] [raw sql] ()
2025-09-01 21:32:05,488 [INFO] select current_schema()
2025-09-01 21:32:05,489 [INFO] [raw sql] ()
2025-09-01 21:32:06,421 [INFO] show standard_conforming_strings
2025-09-01 21:32:06,440 [INFO] [raw sql] ()
2025-09-01 21:32:07,225 [INFO] BEGIN (implicit)
2025-09-01 21:32:07,233 [INFO] 
                INSERT INTO insurance_policies 
                (policy_number, sum_insured, premium, own_retention_ppn, 
                 own_retention_sum_insured, own_retention_premium, treaty_ppn,
                 treaty_sum_insured, treaty_premium, insurance_period_start_date, 
                 insurance_period_end_date)
                VALUES 
                ($1, $2, $3, $4,
                 $5, $6, $7,
                 $8, $9, $10,
                 $11)
                ON CONFLICT (policy_number) DO UPDATE SET
                sum_insured = EXCLUDED.sum_insured,
                premium = EXCLUDED.premium,
                own_retention_ppn = EXCLUDED.own_retention_ppn,
                own_retention_sum_insured = EXCLUDED.own_retention_sum_insured,
                own_retention_premium = EXCLUDED.own_retention_premium,
                treaty_ppn = EXCLUDED.treaty_ppn,
                treaty_sum_insured = EXCLUDED.treaty_sum_insured,
                treaty_premium = EXCLUDED.treaty_premium,
                insurance_period_start_date = EXCLUDED.insurance_period_start_date,
                insurance_period_end_date = EXCLUDED.insurance_period_end_date
            
2025-09-01 21:32:07,252 [INFO] [generated in 0.01927s] ('', 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, None, None)
2025-09-01 21:32:07,953 [INFO] ROLLBACK
2025-09-01 21:32:08,205 [ERROR] Error ingesting data: (sqlalchemy.dialects.postgresql.asyncpg.ProgrammingError) <class 'asyncpg.exceptions.UndefinedColumnError'>: column "treaty_ppn" of relation "insurance_policies" does not exist
[SQL: 
                INSERT INTO insurance_policies 
                (policy_number, sum_insured, premium, own_retention_ppn, 
                 own_retention_sum_insured, own_retention_premium, treaty_ppn,
                 treaty_sum_insured, treaty_premium, insurance_period_start_date, 
                 insurance_period_end_date)
                VALUES 
                ($1, $2, $3, $4,
                 $5, $6, $7,
                 $8, $9, $10,
                 $11)
                ON CONFLICT (policy_number) DO UPDATE SET
                sum_insured = EXCLUDED.sum_insured,
                premium = EXCLUDED.premium,
                own_retention_ppn = EXCLUDED.own_retention_ppn,
                own_retention_sum_insured = EXCLUDED.own_retention_sum_insured,
                own_retention_premium = EXCLUDED.own_retention_premium,
                treaty_ppn = EXCLUDED.treaty_ppn,
                treaty_sum_insured = EXCLUDED.treaty_sum_insured,
                treaty_premium = EXCLUDED.treaty_premium,
                insurance_period_start_date = EXCLUDED.insurance_period_start_date,
                insurance_period_end_date = EXCLUDED.insurance_period_end_date
            ]
[parameters: ('', 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, None, None)]
(Background on this error at: https://sqlalche.me/e/20/f405)
2025-09-01 21:38:29,032 [INFO] select pg_catalog.version()
2025-09-01 21:38:29,043 [INFO] [raw sql] ()
2025-09-01 21:38:30,040 [INFO] select current_schema()
2025-09-01 21:38:30,045 [INFO] [raw sql] ()
2025-09-01 21:38:30,977 [INFO] show standard_conforming_strings
2025-09-01 21:38:30,981 [INFO] [raw sql] ()
2025-09-01 21:38:31,689 [INFO] BEGIN (implicit)
2025-09-01 21:38:31,703 [INFO] 
                INSERT INTO insurance_policies 
                (policy_number, insured_name, sum_insured, premium, own_retention_ppn, 
                 own_retention_sum_insured, own_retention_premium, treaty_retention_ppn,
                 treaty_sum_insured, treaty_premium, facultative_outward_ppn,
                 facultative_outward_sum_insured, facultative_outward_premium,
                 insurance_period_start_date, insurance_period_end_date)
                VALUES 
                ($1, $2, $3, $4, $5,
                 $6, $7, $8,
                 $9, $10, $11,
                 $12, $13,
                 $14, $15)
                ON CONFLICT (policy_number) DO UPDATE SET
                insured_name = EXCLUDED.insured_name,
                sum_insured = EXCLUDED.sum_insured,
                premium = EXCLUDED.premium,
                own_retention_ppn = EXCLUDED.own_retention_ppn,
                own_retention_sum_insured = EXCLUDED.own_retention_sum_insured,
                own_retention_premium = EXCLUDED.own_retention_premium,
                treaty_retention_ppn = EXCLUDED.treaty_retention_ppn,
                treaty_sum_insured = EXCLUDED.treaty_sum_insured,
                treaty_premium = EXCLUDED.treaty_premium,
                facultative_outward_ppn = EXCLUDED.facultative_outward_ppn,
                facultative_outward_sum_insured = EXCLUDED.facultative_outward_sum_insured,
                facultative_outward_premium = EXCLUDED.facultative_outward_premium,
                insurance_period_start_date = EXCLUDED.insurance_period_start_date,
                insurance_period_end_date = EXCLUDED.insurance_period_end_date
            
2025-09-01 21:38:31,738 [INFO] [generated in 0.03532s] ('', 'Unknown', 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, None, None)
2025-09-01 21:38:32,506 [INFO] ROLLBACK
2025-09-01 21:38:32,737 [ERROR] Error ingesting data: (sqlalchemy.dialects.postgresql.asyncpg.ProgrammingError) <class 'asyncpg.exceptions.UndefinedColumnError'>: column "insured_name" of relation "insurance_policies" does not exist
[SQL: 
                INSERT INTO insurance_policies 
                (policy_number, insured_name, sum_insured, premium, own_retention_ppn, 
                 own_retention_sum_insured, own_retention_premium, treaty_retention_ppn,
                 treaty_sum_insured, treaty_premium, facultative_outward_ppn,
                 facultative_outward_sum_insured, facultative_outward_premium,
                 insurance_period_start_date, insurance_period_end_date)
                VALUES 
                ($1, $2, $3, $4, $5,
                 $6, $7, $8,
                 $9, $10, $11,
                 $12, $13,
                 $14, $15)
                ON CONFLICT (policy_number) DO UPDATE SET
                insured_name = EXCLUDED.insured_name,
                sum_insured = EXCLUDED.sum_insured,
                premium = EXCLUDED.premium,
                own_retention_ppn = EXCLUDED.own_retention_ppn,
                own_retention_sum_insured = EXCLUDED.own_retention_sum_insured,
                own_retention_premium = EXCLUDED.own_retention_premium,
                treaty_retention_ppn = EXCLUDED.treaty_retention_ppn,
                treaty_sum_insured = EXCLUDED.treaty_sum_insured,
                treaty_premium = EXCLUDED.treaty_premium,
                facultative_outward_ppn = EXCLUDED.facultative_outward_ppn,
                facultative_outward_sum_insured = EXCLUDED.facultative_outward_sum_insured,
                facultative_outward_premium = EXCLUDED.facultative_outward_premium,
                insurance_period_start_date = EXCLUDED.insurance_period_start_date,
                insurance_period_end_date = EXCLUDED.insurance_period_end_date
            ]
[parameters: ('', 'Unknown', 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, None, None)]
(Background on this error at: https://sqlalche.me/e/20/f405)
2025-09-01 21:43:09,621 [INFO] BEGIN (implicit)
2025-09-01 21:43:09,623 [INFO] 
                INSERT INTO insurance_policies 
                (policy_number, insured_name, sum_insured, premium, own_retention_ppn, 
                 own_retention_sum_insured, own_retention_premium, treaty_retention_ppn,
                 treaty_sum_insured, treaty_premium, facultative_outward_ppn,
                 facultative_outward_sum_insured, facultative_outward_premium,
                 insurance_period_start_date, insurance_period_end_date)
                VALUES 
                ($1, $2, $3, $4, $5,
                 $6, $7, $8,
                 $9, $10, $11,
                 $12, $13,
                 $14, $15)
                ON CONFLICT (policy_number) DO UPDATE SET
                insured_name = EXCLUDED.insured_name,
                sum_insured = EXCLUDED.sum_insured,
                premium = EXCLUDED.premium,
                own_retention_ppn = EXCLUDED.own_retention_ppn,
                own_retention_sum_insured = EXCLUDED.own_retention_sum_insured,
                own_retention_premium = EXCLUDED.own_retention_premium,
                treaty_retention_ppn = EXCLUDED.treaty_retention_ppn,
                treaty_sum_insured = EXCLUDED.treaty_sum_insured,
                treaty_premium = EXCLUDED.treaty_premium,
                facultative_outward_ppn = EXCLUDED.facultative_outward_ppn,
                facultative_outward_sum_insured = EXCLUDED.facultative_outward_sum_insured,
                facultative_outward_premium = EXCLUDED.facultative_outward_premium,
                insurance_period_start_date = EXCLUDED.insurance_period_start_date,
                insurance_period_end_date = EXCLUDED.insurance_period_end_date
            
2025-09-01 21:43:09,638 [INFO] [cached since 277.9s ago] ('', 'Unknown', 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, None, None)
2025-09-01 21:43:10,349 [INFO] ROLLBACK
2025-09-01 21:43:10,577 [ERROR] Error ingesting data: (sqlalchemy.dialects.postgresql.asyncpg.ProgrammingError) <class 'asyncpg.exceptions.UndefinedColumnError'>: column "insured_name" of relation "insurance_policies" does not exist
[SQL: 
                INSERT INTO insurance_policies 
                (policy_number, insured_name, sum_insured, premium, own_retention_ppn, 
                 own_retention_sum_insured, own_retention_premium, treaty_retention_ppn,
                 treaty_sum_insured, treaty_premium, facultative_outward_ppn,
                 facultative_outward_sum_insured, facultative_outward_premium,
                 insurance_period_start_date, insurance_period_end_date)
                VALUES 
                ($1, $2, $3, $4, $5,
                 $6, $7, $8,
                 $9, $10, $11,
                 $12, $13,
                 $14, $15)
                ON CONFLICT (policy_number) DO UPDATE SET
                insured_name = EXCLUDED.insured_name,
                sum_insured = EXCLUDED.sum_insured,
                premium = EXCLUDED.premium,
                own_retention_ppn = EXCLUDED.own_retention_ppn,
                own_retention_sum_insured = EXCLUDED.own_retention_sum_insured,
                own_retention_premium = EXCLUDED.own_retention_premium,
                treaty_retention_ppn = EXCLUDED.treaty_retention_ppn,
                treaty_sum_insured = EXCLUDED.treaty_sum_insured,
                treaty_premium = EXCLUDED.treaty_premium,
                facultative_outward_ppn = EXCLUDED.facultative_outward_ppn,
                facultative_outward_sum_insured = EXCLUDED.facultative_outward_sum_insured,
                facultative_outward_premium = EXCLUDED.facultative_outward_premium,
                insurance_period_start_date = EXCLUDED.insurance_period_start_date,
                insurance_period_end_date = EXCLUDED.insurance_period_end_date
            ]
[parameters: ('', 'Unknown', 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, None, None)]
(Background on this error at: https://sqlalche.me/e/20/f405)
2025-09-01 21:49:09,693 [INFO] BEGIN (implicit)
2025-09-01 21:49:09,695 [INFO] 
                INSERT INTO insurance_policies 
                (policy_number, insured_name, sum_insured, premium, own_retention_ppn, 
                 own_retention_sum_insured, own_retention_premium, treaty_retention_ppn,
                 treaty_sum_insured, treaty_premium, facultative_outward_ppn,
                 facultative_outward_sum_insured, facultative_outward_premium,
                 insurance_period_start_date, insurance_period_end_date)
                VALUES 
                ($1, $2, $3, $4, $5,
                 $6, $7, $8,
                 $9, $10, $11,
                 $12, $13,
                 $14, $15)
                ON CONFLICT (policy_number) DO UPDATE SET
                insured_name = EXCLUDED.insured_name,
                sum_insured = EXCLUDED.sum_insured,
                premium = EXCLUDED.premium,
                own_retention_ppn = EXCLUDED.own_retention_ppn,
                own_retention_sum_insured = EXCLUDED.own_retention_sum_insured,
                own_retention_premium = EXCLUDED.own_retention_premium,
                treaty_retention_ppn = EXCLUDED.treaty_retention_ppn,
                treaty_sum_insured = EXCLUDED.treaty_sum_insured,
                treaty_premium = EXCLUDED.treaty_premium,
                facultative_outward_ppn = EXCLUDED.facultative_outward_ppn,
                facultative_outward_sum_insured = EXCLUDED.facultative_outward_sum_insured,
                facultative_outward_premium = EXCLUDED.facultative_outward_premium,
                insurance_period_start_date = EXCLUDED.insurance_period_start_date,
                insurance_period_end_date = EXCLUDED.insurance_period_end_date
            
2025-09-01 21:49:09,701 [INFO] [cached since 638s ago] ('', 'Unknown', 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, None, None)
2025-09-01 21:49:10,832 [INFO] ROLLBACK
2025-09-01 21:49:11,058 [ERROR] Error ingesting data: (sqlalchemy.dialects.postgresql.asyncpg.ProgrammingError) <class 'asyncpg.exceptions.UndefinedTableError'>: relation "insurance_policies" does not exist
[SQL: 
                INSERT INTO insurance_policies 
                (policy_number, insured_name, sum_insured, premium, own_retention_ppn, 
                 own_retention_sum_insured, own_retention_premium, treaty_retention_ppn,
                 treaty_sum_insured, treaty_premium, facultative_outward_ppn,
                 facultative_outward_sum_insured, facultative_outward_premium,
                 insurance_period_start_date, insurance_period_end_date)
                VALUES 
                ($1, $2, $3, $4, $5,
                 $6, $7, $8,
                 $9, $10, $11,
                 $12, $13,
                 $14, $15)
                ON CONFLICT (policy_number) DO UPDATE SET
                insured_name = EXCLUDED.insured_name,
                sum_insured = EXCLUDED.sum_insured,
                premium = EXCLUDED.premium,
                own_retention_ppn = EXCLUDED.own_retention_ppn,
                own_retention_sum_insured = EXCLUDED.own_retention_sum_insured,
                own_retention_premium = EXCLUDED.own_retention_premium,
                treaty_retention_ppn = EXCLUDED.treaty_retention_ppn,
                treaty_sum_insured = EXCLUDED.treaty_sum_insured,
                treaty_premium = EXCLUDED.treaty_premium,
                facultative_outward_ppn = EXCLUDED.facultative_outward_ppn,
                facultative_outward_sum_insured = EXCLUDED.facultative_outward_sum_insured,
                facultative_outward_premium = EXCLUDED.facultative_outward_premium,
                insurance_period_start_date = EXCLUDED.insurance_period_start_date,
                insurance_period_end_date = EXCLUDED.insurance_period_end_date
            ]
[parameters: ('', 'Unknown', 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, None, None)]
(Background on this error at: https://sqlalche.me/e/20/f405)
2025-09-01 22:00:43,931 [INFO] Running database migrations...
2025-09-01 22:00:44,244 [ERROR] Migration error: password authentication failed for user "postgres"
2025-09-01 22:00:44,246 [INFO] Application startup complete
2025-09-01 22:01:14,188 [INFO] Running database migrations...
2025-09-01 22:01:14,296 [ERROR] Migration error: password authentication failed for user "postgres"
2025-09-01 22:01:14,297 [INFO] Application startup complete
2025-09-01 22:01:32,074 [INFO] Running database migrations...
2025-09-01 22:01:32,332 [ERROR] Migration error: password authentication failed for user "postgres"
2025-09-01 22:01:32,363 [INFO] Application startup complete
2025-09-01 22:01:55,074 [INFO] Running database migrations...
2025-09-01 22:01:55,218 [ERROR] Migration error: password authentication failed for user "postgres"
2025-09-01 22:01:55,220 [INFO] Application startup complete
2025-09-01 22:05:54,326 [INFO] Running database migrations...
2025-09-01 22:05:54,354 [ERROR] Migration error: (sqlalchemy.dialects.postgresql.asyncpg.ProgrammingError) <class 'asyncpg.exceptions.UndefinedTableError'>: relation "insurance_policies" does not exist
[SQL: 
        ALTER TABLE insurance_policies 
        ADD COLUMN IF NOT EXISTS insured_name VARCHAR(255)
        ]
(Background on this error at: https://sqlalche.me/e/20/f405)
2025-09-01 22:05:54,359 [INFO] Application startup complete
2025-09-01 23:17:00,181 [INFO] Running database migrations...
2025-09-01 23:17:00,399 [ERROR] Migration error: password authentication failed for user "postgres"
2025-09-01 23:17:00,401 [INFO] Application startup complete
2025-09-01 23:20:07,204 [INFO] Running database migrations...
2025-09-01 23:20:07,393 [ERROR] Migration error: password authentication failed for user "postgres"
2025-09-01 23:20:07,394 [INFO] Application startup complete
2025-09-01 23:24:16,391 [INFO] Running database migrations...
2025-09-01 23:24:17,758 [INFO] Running database migrations...
2025-09-01 23:24:22,065 [INFO] Executed migration: 
        CREATE TABLE IF NOT EXISTS insurance_policies (
            policy_number VARCHAR(255) PRIMARY KEY,
            sum_insured DOUBLE PRECISION,
            premium DOUBLE PRECISION,
            own_retention_ppn DOUBLE PRECISION,
            own_retention_sum_insured DOUBLE PRECISION,
            own_retention_premium DOUBLE PRECISION,
            treaty_retention_ppn DOUBLE PRECISION,
            treaty_sum_insured DOUBLE PRECISION,
            treaty_premium DOUBLE PRECISION,
            insurance_period_start_date DATE,
            insurance_period_end_date DATE,
            vector_id VARCHAR(36)
        )
        
2025-09-01 23:24:22,525 [INFO] Executed migration: 
        ALTER TABLE insurance_policies 
        ADD COLUMN IF NOT EXISTS insured_name VARCHAR(255)
        
2025-09-01 23:24:22,977 [INFO] Executed migration: 
        ALTER TABLE insurance_policies 
        ADD COLUMN IF NOT EXISTS facultative_outward_ppn DOUBLE PRECISION
        
2025-09-01 23:24:23,444 [INFO] Executed migration: 
        ALTER TABLE insurance_policies 
        ADD COLUMN IF NOT EXISTS facultative_outward_sum_insured DOUBLE PRECISION
        
2025-09-01 23:24:23,911 [INFO] Executed migration: 
        ALTER TABLE insurance_policies 
        ADD COLUMN IF NOT EXISTS facultative_outward_premium DOUBLE PRECISION
        
2025-09-01 23:24:24,140 [INFO] Database migration completed successfully
2025-09-01 23:24:24,376 [INFO] Application startup complete
2025-09-01 23:24:24,397 [ERROR] Migration error: (sqlalchemy.dialects.postgresql.asyncpg.IntegrityError) <class 'asyncpg.exceptions.UniqueViolationError'>: duplicate key value violates unique constraint "pg_type_typname_nsp_index"
DETAIL:  Key (typname, typnamespace)=(insurance_policies, 2200) already exists.
[SQL: 
        CREATE TABLE IF NOT EXISTS insurance_policies (
            policy_number VARCHAR(255) PRIMARY KEY,
            sum_insured DOUBLE PRECISION,
            premium DOUBLE PRECISION,
            own_retention_ppn DOUBLE PRECISION,
            own_retention_sum_insured DOUBLE PRECISION,
            own_retention_premium DOUBLE PRECISION,
            treaty_retention_ppn DOUBLE PRECISION,
            treaty_sum_insured DOUBLE PRECISION,
            treaty_premium DOUBLE PRECISION,
            insurance_period_start_date DATE,
            insurance_period_end_date DATE,
            vector_id VARCHAR(36)
        )
        ]
(Background on this error at: https://sqlalche.me/e/20/gkpj)
2025-09-01 23:24:24,625 [INFO] Application startup complete
2025-09-01 22:26:16,736 [INFO] select pg_catalog.version()
2025-09-01 22:26:16,740 [INFO] [raw sql] ()
2025-09-01 22:26:16,746 [INFO] select current_schema()
2025-09-01 22:26:16,747 [INFO] [raw sql] ()
2025-09-01 22:26:16,751 [INFO] show standard_conforming_strings
2025-09-01 22:26:16,752 [INFO] [raw sql] ()
2025-09-01 22:26:16,759 [INFO] BEGIN (implicit)
2025-09-01 22:26:16,762 [INFO] SELECT column_name FROM information_schema.columns WHERE table_name = 'insurance_policies'
2025-09-01 22:26:16,763 [INFO] [generated in 0.00182s] ()
2025-09-01 22:26:16,805 [INFO] Existing columns in database: []
2025-09-01 22:26:16,844 [INFO] COMMIT
2025-09-01 22:40:07,566 [INFO] BEGIN (implicit)
2025-09-01 22:40:07,574 [INFO] SELECT column_name FROM information_schema.columns WHERE table_name = 'insurance_policies'
2025-09-01 22:40:07,580 [INFO] [cached since 830.9s ago] ()
2025-09-01 22:40:07,588 [INFO] Existing columns in database: []
2025-09-01 22:40:07,661 [INFO] COMMIT
2025-09-01 23:21:38,195 [ERROR] SQL query error: An output parsing error occurred. In order to pass this error back to the agent and have it try again, pass `handle_parsing_errors=True` to the AgentExecutor. This is the error: Could not parse LLM output: `I don't know`
For troubleshooting, visit: https://python.langchain.com/docs/troubleshooting/errors/OUTPUT_PARSING_FAILURE 
